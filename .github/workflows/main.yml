name: Release Creation

permissions:
  contents: write

on:
  release:
    types: [published]

env:
  node_version: 20

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}

      - name: Install dependencies (if present)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f package.json ]; then
            npm install
          fi

      - name: Prepare dist folder
        run: |
          rm -rf dist
          mkdir dist
          rsync -av \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='dist' \
            --exclude='dist-latest' \
            --exclude='node_modules' \
            --exclude='module.zip' \
            ./ ./dist/

      - name: Gather release metadata
        id: release
        run: |
          TAG="${{ github.event.release.tag_name }}"
          VERSION="${TAG#v}"
          REPO="${{ github.repository }}"
          MANIFEST_URL="https://github.com/${REPO}/releases/download/${TAG}/module.json"
          DOWNLOAD_URL="https://github.com/${REPO}/releases/download/${TAG}/module.zip"
          LATEST_MANIFEST_URL="https://github.com/${REPO}/releases/download/latest/module.json"
          LATEST_DOWNLOAD_URL="https://github.com/${REPO}/releases/download/latest/module.zip"

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "manifest_url=$MANIFEST_URL" >> "$GITHUB_OUTPUT"
          echo "download_url=$DOWNLOAD_URL" >> "$GITHUB_OUTPUT"
          echo "latest_manifest_url=$LATEST_MANIFEST_URL" >> "$GITHUB_OUTPUT"
          echo "latest_download_url=$LATEST_DOWNLOAD_URL" >> "$GITHUB_OUTPUT"

      - name: Update release manifest
        run: |
          jq \
            --arg version "${{ steps.release.outputs.version }}" \
            --arg manifest "${{ steps.release.outputs.manifest_url }}" \
            --arg download "${{ steps.release.outputs.download_url }}" \
            --arg repo "https://github.com/${{ github.repository }}" \
            '(.flags.hotReload = false) | .version = $version | .url = $repo | .manifest = $manifest | .download = $download' \
            dist/module.json > dist/module.json.tmp && mv dist/module.json.tmp dist/module.json

      - name: Create release archive
        working-directory: dist
        run: zip -r ../module.zip ./*

      - name: Update GitHub release
        id: update-release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: ${{ steps.release.outputs.tag }}
          name: ${{ github.event.release.name }}
          artifacts: "./module.zip, ./dist/module.json"
          draft: false
          prerelease: ${{ github.event.release.prerelease }}
          generateReleaseNotes: false
          body: ${{ github.event.release.body }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare latest artifact
        if: ${{ !github.event.release.prerelease }}
        run: |
          rm -rf dist-latest
          mkdir dist-latest
          rsync -av dist/ dist-latest/
          jq \
            --arg version "${{ steps.release.outputs.version }}" \
            --arg manifest "${{ steps.release.outputs.latest_manifest_url }}" \
            --arg download "${{ steps.release.outputs.latest_download_url }}" \
            --arg repo "https://github.com/${{ github.repository }}" \
            '(.flags.hotReload = false) | .version = $version | .url = $repo | .manifest = $manifest | .download = $download' \
            dist-latest/module.json > dist-latest/module.json.tmp && mv dist-latest/module.json.tmp dist-latest/module.json

      - name: Zip latest artifact
        if: ${{ !github.event.release.prerelease }}
        working-directory: dist-latest
        run: zip -r ../module.zip ./*

      - name: Update latest GitHub release
        if: ${{ !github.event.release.prerelease }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: latest
          name: Latest Release
          artifacts: "./module.zip, ./dist-latest/module.json"
          draft: false
          prerelease: false
          generateReleaseNotes: false
          body: "Latest stable release for version ${{ steps.release.outputs.version }}."
          token: ${{ secrets.GITHUB_TOKEN }}
